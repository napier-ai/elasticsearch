[[mapping]]
= Mapping

[partintro]
--

*Mapping* is the process of defining how a document, and the fields it contains,
are stored and indexed.  For instance, use mappings to define:

* which string fields should be treated as full text fields.
* which fields contain numbers, dates, or geolocations.
* the <<mapping-date-format,format>> of date values.
* custom rules to control the mapping for
  <<dynamic-mapping,dynamically added fields>>.


[float]
[[field-types]]
== Field datatypes
To treat date fields as dates or numeric fields as numbers, {es} needs to know
the **field datatype**, the kind of data a field contains.

Field datatypes are broadly divided into the following categories:

* *Core* field datatypes which support simple data, such as <<text,`text`>>,
  <<keyword,`keyword`>>, <<date,`date`>>, <<number,`long`>>,
  <<number,`double`>>, or <<boolean,`boolean`>>
* *Complex* field datatypes which model hierarchical relationships, such as
  <<object,`object`>> or <<nested,`nested`>>
* *Geo* field datatypes which support geographical data, such as
  <<geo-point,`geo_point`>> or <<geo-shape,`geo_shape`>>
* *Specialized* field datatypes which support unique functionality or
  use cases, such as <<ip,`ip`>> or
  <<completion-suggester,`completion`>>

See <<mapping-types>> for a list of field datatypes.


[float]
[[create-mapping]]
== Create an index with a mapping

You can use the <<indices-create-index,create index>> API to create a new index
with a mapping.

[source,js]
---------------------------------------
PUT my-index
{
  "mappings": {
    "properties": {
      "age":      { "type": "integer" }, <1>
      "email":     { "type": "keyword"  }, <2>
      "name":    { "type": "text"  } <3>
    }
  }
}
---------------------------------------
// CONSOLE
// TESTSETUP

<1> Creates `age`, an <<number,`integer`>> field
<2> Creates `email`, a <<keyword,`keyword`>> field
<3> Creates `name`, a <<text,`text`>> field


[float]
[[mapping-parameters]]
== Customize a mapping

In addition to the field datatype, you can also customize how {es}
handles a field using options called *mapping parameters*.

For example, it is often useful to index the same field in different ways for different
purposes. A field containing text strings could be <<mapping-index,indexed>> as
a `text` field for full-text search, and as a `keyword` field for
sorting or aggregations.  Alternatively, you could index a string field with
the <<analysis-standard-analyzer,`standard` analyzer>>, the
<<english-analyzer,`english`>> analyzer, and the
<<french-analyzer,`french` analyzer>>.

This is the purpose of _multi-fields_.  Most datatypes support multi-fields
via the <<multi-fields>> parameter.

See <<mapping-params>> for a list of mapping parameters.


[float]
[[add-field-mapping]]
== Add a new field to a mapping

You can use the <<indices-put-mapping, put mapping>> API to add one or more new
fields to an index.

The following example adds `employee-id`, a `keyword` field with a `index`
parameter of `false`. This means values for the `employee-id` field values are
stored but not available for search.

[source,js]
--------------------------------------------------
PUT /my-index/_mapping
{
  "properties": {
    "employee-id": {
      "type": "keyword",
      "index": false

    }
  }
}
--------------------------------------------------
// CONSOLE


[float]
[[view-mapping]]
== View a mapping

You can use the <<indices-get-mapping, get mapping>> API to view the mapping of
an existing index.

[source,js]
---------------------------------------
GET /my-index/_mapping
---------------------------------------
// CONSOLE

The API returns the following response:

[source,js]
---------------------------------------
{
  "my-index" : {
    "mappings" : {
      "properties" : {
        "age" : {
          "type" : "integer"
        },
        "email" : {
          "type" : "keyword"
        },
        "name" : {
          "type" : "text"
        },
        "employee-id" : {
          "type" : "keyword",
          "index" : "false"
        }
      }
    }
  }
}
---------------------------------------
// TESTRESPONSE


[float]
[[view-field-mapping]]
== View the mapping of specific fields

If you only want to view the mapping of one or more specific fields, you can use
the <<indices-get-field-mapping, get field mapping>> API.

This is useful if you don't need the complete mapping of an index or your index
contains a large number of fields.

The following request retrieves the mapping for the `employee-id` field.

[source,js]
--------------------------------------------------
GET /my-index/_mapping/field/employee-id
--------------------------------------------------
// CONSOLE

The API returns the following response:

[source,js]
---------------------------------------
{
  "my-index" : {
    "mappings" : {
      "title" : {
        "full_name" : "employee-id",
        "mapping" : {
          "title" : {
            "type" : "keyword",
            "index" : "false"
          }
        }
      }
    }
  }
}
---------------------------------------
// TESTRESPONSE


[float]
[[update-field-mappings]]
== Update existing field mappings

Other than where documented, *existing field mappings cannot be
updated*. Changing the mapping would mean invalidating already indexed
documents. Instead, you should create a new index with the correct mappings
and <<docs-reindex,reindex>> your data into that index. If you only wish
to rename a field and not change its mappings, it may make sense to introduce
an <<alias, `alias`>> field.


[float]
[[meta-fields]]
== Meta-fields
Aside from fields that you create, all {es} documents include built-in fields,
called *meta-fields*, that contain metadata.

For example, the <<mapping-index-field,`_index`>> field contains the name of the
index to which a document belongs.

As another example, the <<mapping-source-field,`_source`>> field contains the
original JSON representation of the document.

See <<mapping-fields>> for a list of meta-fields.


[float]
== Dynamic mapping

Fields and mapping types do not need to be defined before being used. Thanks
to _dynamic mapping_, new field names will be added automatically, just by
indexing a document. New fields can be added both to the top-level mapping
type, and to inner <<object,`object`>>  and <<nested,`nested`>> fields.

The <<dynamic-mapping,dynamic mapping>> rules can be configured to customize
the mapping that is used for new fields.


[float]
[[mapping-limit-settings]]
== Settings to prevent a mappings explosion

Defining too many fields in an index is a condition that can lead to a
mapping explosion, which can cause out of memory errors and difficult
situations to recover from. This problem may be more common than expected.
As an example, consider a situation in which every new document inserted
introduces new fields. This is quite common with dynamic mappings.
Every time a document contains new fields, those will end up in the index's
mappings. This isn't worrying for a small amount of data, but it can become a
problem as the mapping grows.
The following settings allow you to limit the number of field mappings that
can be created manually or dynamically, in order to prevent bad documents from
causing a mapping explosion:

`index.mapping.total_fields.limit`::
    The maximum number of fields in an index. Field and object mappings, as well as
    field aliases count towards this limit. The default value is `1000`.

`index.mapping.depth.limit`::
    The maximum depth for a field, which is measured as the number of inner
    objects. For instance, if all fields are defined at the root object level,
    then the depth is `1`. If there is one object mapping, then the depth is
    `2`, etc. The default is `20`.

`index.mapping.nested_fields.limit`::
    The maximum number of distinct `nested` mappings in an index, defaults to `50`.

`index.mapping.nested_objects.limit`::
    The maximum number of `nested` JSON objects within a single document across
    all nested types, defaults to 10000.

`index.mapping.field_name_length.limit`::
    Setting for the maximum length of a field name. The default value is
    Long.MAX_VALUE (no limit). This setting isn't really something that addresses
    mappings explosion but might still be useful if you want to limit the field length.
    It usually shouldn't be necessary to set this setting. The default is okay
    unless a user starts to add a huge number of fields with really long names.


[float]
[[mapping-type]]
== Mapping type is deprecated
Prior to 7.0, mappings are associated with mapping types. Mapping types are now
deprecated. See <<removal-of-types>> for more information.
--

include::mapping/removal_of_types.asciidoc[]

include::mapping/types.asciidoc[]

include::mapping/fields.asciidoc[]

include::mapping/params.asciidoc[]

include::mapping/dynamic-mapping.asciidoc[]
